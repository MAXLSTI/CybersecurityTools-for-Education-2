#!/usr/bin/env python3
"""
Detector de Malware - Analizador b√°sico de archivos sospechosos
Identifica patrones comunes de malware y comportamientos sospechosos
"""

import os
import hashlib
import re
import magic
import sys
from datetime import datetime
import json

# Firmas de malware conocidas (hashes MD5 de ejemplos - expandir en uso real)
KNOWN_MALWARE_HASHES = {
    '44d88612fea8a8f36de82e1278abb02f': 'Eicar-Test-Signature',
    '275a021bbfb6489e54d471899f7db9d1663fc695ec2fe2a2c4538aabf651fd0f': 'WannaCry',
}

# Patrones sospechosos en nombres de archivo
SUSPICIOUS_PATTERNS = [
    r'\.exe\.', r'\.scr$', r'\.bat$', r'\.cmd$', r'\.vbs$',
    r'\.js$', r'\.jar$', r'\.ps1$', r'invoice.*\.zip',
    r'password.*\.txt', r'crack', r'keygen', r'patch'
]

# Strings sospechosos en contenido
SUSPICIOUS_STRINGS = [
    b'cmd.exe', b'powershell', b'eval(', b'exec(',
    b'base64', b'shell_exec', b'system(', b'passthru',
    b'CreateObject', b'WScript.Shell', b'regsvr32',
    b'certutil', b'bitsadmin', b'rundll32'
]

# Extensiones potencialmente peligrosas
DANGEROUS_EXTENSIONS = [
    '.exe', '.dll', '.scr', '.bat', '.cmd', '.vbs', 
    '.js', '.jar', '.msi', '.ps1', '.pif', '.com'
]

def calculate_hash(filepath):
    """Calcula hashes MD5 y SHA256 del archivo"""
    md5_hash = hashlib.md5()
    sha256_hash = hashlib.sha256()
    
    try:
        with open(filepath, 'rb') as f:
            for chunk in iter(lambda: f.read(4096), b''):
                md5_hash.update(chunk)
                sha256_hash.update(chunk)
        
        return {
            'md5': md5_hash.hexdigest(),
            'sha256': sha256_hash.hexdigest()
        }
    except Exception as e:
        return None

def check_file_signature(filepath):
    """Verifica la firma del archivo usando libmagic"""
    try:
        file_type = magic.from_file(filepath)
        mime_type = magic.from_file(filepath, mime=True)
        return file_type, mime_type
    except:
        # Si magic no est√° disponible, usar extensi√≥n
        return "Desconocido", "application/octet-stream"

def scan_suspicious_strings(filepath):
    """Busca strings sospechosos en el archivo"""
    suspicious_found = []
    
    try:
        with open(filepath, 'rb') as f:
            content = f.read()
            
            for pattern in SUSPICIOUS_STRINGS:
                if pattern in content:
                    suspicious_found.append(pattern.decode('utf-8', errors='ignore'))
        
        return suspicious_found
    except Exception as e:
        return []

def check_filename_pattern(filename):
    """Verifica si el nombre del archivo es sospechoso"""
    suspicious = []
    
    for pattern in SUSPICIOUS_PATTERNS:
        if re.search(pattern, filename, re.IGNORECASE):
            suspicious.append(f"Patr√≥n sospechoso: {pattern}")
    
    return suspicious

def check_extension(filename):
    """Verifica si la extensi√≥n es peligrosa"""
    ext = os.path.splitext(filename)[1].lower()
    return ext in DANGEROUS_EXTENSIONS

def analyze_file(filepath):
    """Realiza an√°lisis completo del archivo"""
    results = {
        'filename': os.path.basename(filepath),
        'filepath': filepath,
        'size': 0,
        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'hashes': None,
        'file_type': 'Desconocido',
        'mime_type': 'Desconocido',
        'threat_level': 'BAJO',
        'alerts': [],
        'suspicious_strings': [],
        'is_dangerous': False
    }
    
    # Verificar si el archivo existe
    if not os.path.exists(filepath):
        results['alerts'].append('‚ùå El archivo no existe')
        return results
    
    # Obtener tama√±o
    results['size'] = os.path.getsize(filepath)
    
    # Calcular hashes
    print("[*] Calculando hashes...")
    hashes = calculate_hash(filepath)
    if hashes:
        results['hashes'] = hashes
        
        # Verificar contra base de malware conocido
        if hashes['md5'] in KNOWN_MALWARE_HASHES:
            results['threat_level'] = 'CR√çTICO'
            results['alerts'].append(f"üö® MALWARE CONOCIDO: {KNOWN_MALWARE_HASHES[hashes['md5']]}")
            results['is_dangerous'] = True
    
    # Verificar tipo de archivo
    print("[*] Analizando tipo de archivo...")
    file_type, mime_type = check_file_signature(filepath)
    results['file_type'] = file_type
    results['mime_type'] = mime_type
    
    # Verificar nombre de archivo
    print("[*] Analizando nombre de archivo...")
    filename_alerts = check_filename_pattern(results['filename'])
    if filename_alerts:
        results['alerts'].extend(filename_alerts)
        if results['threat_level'] == 'BAJO':
            results['threat_level'] = 'MEDIO'
    
    # Verificar extensi√≥n peligrosa
    if check_extension(results['filename']):
        results['alerts'].append('‚ö†Ô∏è Extensi√≥n potencialmente peligrosa')
        if results['threat_level'] == 'BAJO':
            results['threat_level'] = 'MEDIO'
    
    # Buscar strings sospechosos
    print("[*] Buscando strings sospechosos...")
    suspicious = scan_suspicious_strings(filepath)
    if suspicious:
        results['suspicious_strings'] = suspicious
        results['alerts'].append(f'‚ö†Ô∏è Encontrados {len(suspicious)} strings sospechosos')
        if results['threat_level'] != 'CR√çTICO':
            results['threat_level'] = 'ALTO' if len(suspicious) > 3 else 'MEDIO'
    
    # Verificar tama√±o sospechoso
    if results['size'] == 0:
        results['alerts'].append('‚ö†Ô∏è Archivo vac√≠o')
    elif results['size'] < 100:
        results['alerts'].append('‚ö†Ô∏è Archivo extremadamente peque√±o (posible dropper)')
    
    return results

def print_results(results):
    """Imprime los resultados del an√°lisis"""
    print("\n" + "="*70)
    print(" REPORTE DE AN√ÅLISIS DE MALWARE")
    print("="*70)
    
    print(f"\nüìÑ Archivo: {results['filename']}")
    print(f"üìç Ruta: {results['filepath']}")
    print(f"üìä Tama√±o: {results['size']:,} bytes")
    print(f"üïê Fecha de an√°lisis: {results['timestamp']}")
    
    if results['hashes']:
        print(f"\nüîê Hashes:")
        print(f"   MD5:    {results['hashes']['md5']}")
        print(f"   SHA256: {results['hashes']['sha256']}")
    
    print(f"\nüìù Tipo de archivo: {results['file_type']}")
    print(f"üè∑Ô∏è  MIME Type: {results['mime_type']}")
    
    # Nivel de amenaza con colores
    threat_colors = {
        'BAJO': 'üü¢',
        'MEDIO': 'üü°',
        'ALTO': 'üü†',
        'CR√çTICO': 'üî¥'
    }
    
    print(f"\n{threat_colors.get(results['threat_level'], '‚ö™')} NIVEL DE AMENAZA: {results['threat_level']}")
    
    if results['alerts']:
        print(f"\n‚ö†Ô∏è  ALERTAS ({len(results['alerts'])}):")
        for alert in results['alerts']:
            print(f"   ‚Ä¢ {alert}")
    
    if results['suspicious_strings']:
        print(f"\nüîç STRINGS SOSPECHOSOS ENCONTRADOS ({len(results['suspicious_strings'])}):")
        for string in results['suspicious_strings'][:10]:  # Mostrar solo los primeros 10
            print(f"   ‚Ä¢ {string}")
        if len(results['suspicious_strings']) > 10:
            print(f"   ... y {len(results['suspicious_strings']) - 10} m√°s")
    
    print("\n" + "="*70)
    
    if results['is_dangerous'] or results['threat_level'] in ['ALTO', 'CR√çTICO']:
        print("‚ùå RECOMENDACI√ìN: NO ejecutar este archivo. Podr√≠a ser malware.")
    elif results['threat_level'] == 'MEDIO':
        print("‚ö†Ô∏è  RECOMENDACI√ìN: Proceder con precauci√≥n. Analizar m√°s a fondo.")
    else:
        print("‚úÖ RECOMENDACI√ìN: El archivo parece seguro, pero siempre mant√©n precauci√≥n.")
    
    print("="*70 + "\n")

def main():
    print("="*70)
    print(" DETECTOR DE MALWARE - Herramienta de An√°lisis de Archivos")
    print("="*70)
    
    if len(sys.argv) < 2:
        print("\n‚ùå Uso: python3 malware_detector.py <ruta_del_archivo>")
        print("Ejemplo: python3 malware_detector.py archivo_sospechoso.exe\n")
        sys.exit(1)
    
    filepath = sys.argv[1]
    
    print(f"\n[*] Iniciando an√°lisis de: {filepath}")
    print("[*] Por favor espera...\n")
    
    try:
        results = analyze_file(filepath)
        print_results(results)
        
        # Preguntar si guardar reporte
        save = input("¬øDeseas guardar el reporte en JSON? (s/n): ").strip().lower()
        if save == 's':
            report_file = f"reporte_{os.path.basename(filepath)}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=4, ensure_ascii=False)
            print(f"\n‚úÖ Reporte guardado en: {report_file}")
    
    except KeyboardInterrupt:
        print("\n\n[!] An√°lisis interrumpido por el usuario")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Error durante el an√°lisis: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()